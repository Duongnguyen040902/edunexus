// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using sep.backend.v1.Extensions.EF;

#nullable disable

namespace sep.backend.v1.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20241126133830_CRAddIsCompleteVerify")]
    partial class CRAddIsCompleteVerify
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("sep.backend.v1.Data.Entities.ActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ActivityLogs", (string)null);
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.AttendanceRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AttendanceSession")
                        .HasColumnType("integer");

                    b.Property<int>("AttendanceType")
                        .HasColumnType("integer");

                    b.Property<int?>("BusId")
                        .HasColumnType("integer");

                    b.Property<int?>("ClassId")
                        .HasColumnType("integer");

                    b.Property<int?>("ClubId")
                        .HasColumnType("integer");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Feedback")
                        .HasColumnType("text");

                    b.Property<bool?>("IsAttend")
                        .HasColumnType("boolean");

                    b.Property<int>("PupilId")
                        .HasColumnType("integer");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BusId");

                    b.HasIndex("ClassId");

                    b.HasIndex("ClubId");

                    b.HasIndex("PupilId", "CreatedDate", "AttendanceType")
                        .IsUnique();

                    b.ToTable("AttendanceRecords", (string)null);
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.Blacklist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("ExpireDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.ToTable("Blacklists", (string)null);
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.Bus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BusRouteId")
                        .HasColumnType("integer");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DriverName")
                        .HasColumnType("text");

                    b.Property<string>("DriverPhone")
                        .HasColumnType("text");

                    b.Property<string>("LicensePlate")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SeatNumber")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BusRouteId");

                    b.ToTable("Buses", (string)null);
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.BusEnrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BusId")
                        .HasColumnType("integer");

                    b.Property<int?>("BusStopId")
                        .HasColumnType("integer");

                    b.Property<int?>("BusSupervisorId")
                        .HasColumnType("integer");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("PupilId")
                        .HasColumnType("integer");

                    b.Property<int>("SemesterId")
                        .HasColumnType("integer");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BusId");

                    b.HasIndex("BusStopId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("BusSupervisorId", "SemesterId")
                        .IsUnique();

                    b.HasIndex("PupilId", "SemesterId")
                        .IsUnique();

                    b.ToTable("BusEnrollments", (string)null);
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.BusRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("BusRoutes", (string)null);
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.BusRouteRegistration", b =>
                {
                    b.Property<int>("PupilId")
                        .HasColumnType("integer");

                    b.Property<int>("BusStopId")
                        .HasColumnType("integer");

                    b.Property<int>("SemesterId")
                        .HasColumnType("integer");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("PupilId", "BusStopId", "SemesterId");

                    b.HasIndex("BusStopId");

                    b.HasIndex("SemesterId");

                    b.ToTable("BusRouteRegistrations", (string)null);
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.BusStop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("BusRouteId")
                        .HasColumnType("integer");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<TimeSpan>("PickUpTime")
                        .HasColumnType("time(7) without time zone");

                    b.Property<TimeSpan>("ReturnTime")
                        .HasColumnType("time(7) without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BusRouteId");

                    b.ToTable("BusStops", (string)null);
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.BusSupervisor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool?>("Gender")
                        .HasColumnType("boolean");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool?>("IsCompleteVerify")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer");

                    b.Property<string>("ShortRoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("BusSupervisors", (string)null);
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Block")
                        .HasColumnType("integer");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Classes", (string)null);
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.ClassApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationCategoryId")
                        .HasColumnType("integer");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PupilId")
                        .HasColumnType("integer");

                    b.Property<string>("Response")
                        .HasColumnType("text");

                    b.Property<int>("SemesterId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationCategoryId");

                    b.HasIndex("PupilId");

                    b.HasIndex("SemesterId");

                    b.ToTable("ClassApplication", (string)null);
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.ClassApplicationCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ClassApplicationCategory", (string)null);
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.ClassEnrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OldTeacher")
                        .HasColumnType("text");

                    b.Property<int?>("PupilId")
                        .HasColumnType("integer");

                    b.Property<int>("SemesterId")
                        .HasColumnType("integer");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("integer");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("PupilId", "SemesterId")
                        .IsUnique();

                    b.HasIndex("TeacherId", "SemesterId")
                        .IsUnique();

                    b.ToTable("ClassEnrollments", (string)null);
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.Club", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Clubs", (string)null);
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.ClubEnrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClubId")
                        .HasColumnType("integer");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("PupilId")
                        .HasColumnType("integer");

                    b.Property<int>("SemesterId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("integer");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("PupilId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("TeacherId");

                    b.ToTable("ClubEnrollments", (string)null);
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FeatureName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Features", (string)null);
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.FeatureAccess", b =>
                {
                    b.Property<int>("FeatureId")
                        .HasColumnType("integer");

                    b.Property<int>("SubscriptionPlanId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("FeatureId", "SubscriptionPlanId", "Id");

                    b.HasIndex("SubscriptionPlanId");

                    b.ToTable("FeatureAccesses", (string)null);
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("timestamp");

                    b.Property<int>("SchoolSubscriptionPlanId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SchoolSubscriptionPlanId");

                    b.ToTable("Invoices", (string)null);
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.NotificationCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("NotificationCategories", (string)null);
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.NotificationImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("NotificationId")
                        .HasColumnType("integer");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.ToTable("NotificationImages", (string)null);
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.Notifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Descriptions")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("SchoolYearId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ClassId");

                    b.HasIndex("SchoolYearId");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,2)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("integer");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Permissions", (string)null);
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.Pupil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DonorName")
                        .HasColumnType("text");

                    b.Property<string>("DonorPhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool?>("Gender")
                        .HasColumnType("boolean");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool?>("IsCompleteVerify")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer");

                    b.Property<string>("ShortRoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Pupils", (string)null);
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.PupilFeedback", b =>
                {
                    b.Property<int>("PupilId")
                        .HasColumnType("integer");

                    b.Property<int>("SemesterId")
                        .HasColumnType("integer");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("PupilId", "SemesterId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("SubjectId");

                    b.ToTable("PupilFeedbacks", (string)null);
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.PupilScore", b =>
                {
                    b.Property<int>("PupilId")
                        .HasColumnType("integer");

                    b.Property<int>("SemesterId")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("PupilId", "SemesterId", "SubjectId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("SubjectId");

                    b.ToTable("PupilScores", (string)null);
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions", (string)null);
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateOfEstablishment")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("District")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FAX")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("PrincipalName")
                        .HasColumnType("text");

                    b.Property<string>("PrincipalPhone")
                        .HasColumnType("text");

                    b.Property<string>("Province")
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ShortRoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StandardCode")
                        .HasColumnType("text");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Ward")
                        .HasColumnType("text");

                    b.Property<string>("WebsiteLink")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Schools", (string)null);
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.SchoolSubscriptionPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("SubscriptionPlanId")
                        .HasColumnType("integer");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SubscriptionPlanId");

                    b.ToTable("SchoolSubscriptionPlans", (string)null);
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.SchoolYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("SchoolYears", (string)null);
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.Semester", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("SchoolYearId")
                        .HasColumnType("integer");

                    b.Property<string>("SemesterCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SemesterName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("SchoolYearId");

                    b.ToTable("Semesters", (string)null);
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Subjects", (string)null);
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.SubscriptionPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("DurationDays")
                        .HasColumnType("int");

                    b.Property<int>("MaxActiveAccounts")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionPlans", (string)null);
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.SuperAdmin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountStatus")
                        .HasColumnType("integer");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ShortRoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SuperAdmin", (string)null);
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool?>("Gender")
                        .HasColumnType("boolean");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool?>("IsCompleteVerify")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SchoolId")
                        .HasColumnType("integer");

                    b.Property<string>("ShortRoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Teachers", (string)null);
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.TeacherSubject", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("TeacherId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("TeacherSubjects", (string)null);
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.TimeSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<TimeSpan?>("EndTime")
                        .IsRequired()
                        .HasColumnType("interval");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("integer");

                    b.Property<TimeSpan?>("StartTime")
                        .IsRequired()
                        .HasColumnType("interval");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("TimeSlots", (string)null);
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.TimeTable", b =>
                {
                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<int>("TimeSlotId")
                        .HasColumnType("integer");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer");

                    b.Property<int>("SemesterId")
                        .HasColumnType("integer");

                    b.HasKey("ClassId", "SubjectId", "TimeSlotId", "DayOfWeek", "SemesterId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TimeSlotId");

                    b.ToTable("TimeTables", (string)null);
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.TimeTableSlotSubject", b =>
                {
                    b.Property<int>("TimeSlotId")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TimeTableClassId")
                        .HasColumnType("integer");

                    b.Property<int>("TimeTableDayOfWeek")
                        .HasColumnType("integer");

                    b.Property<int>("TimeTableId")
                        .HasColumnType("integer");

                    b.Property<int>("TimeTableSemesterId")
                        .HasColumnType("integer");

                    b.Property<int>("TimeTableSubjectId")
                        .HasColumnType("integer");

                    b.Property<int>("TimeTableTimeSlotId")
                        .HasColumnType("integer");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("TimeSlotId", "SubjectId", "DayOfWeek");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TimeTableClassId", "TimeTableSubjectId", "TimeTableTimeSlotId", "TimeTableDayOfWeek", "TimeTableSemesterId");

                    b.ToTable("TimeTableSlotSubjects", (string)null);
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("RefreshTokenExpiryDate")
                        .HasColumnType("timestamp");

                    b.Property<int?>("SchoolId")
                        .HasColumnType("integer");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.ActivityLog", b =>
                {
                    b.HasOne("sep.backend.v1.Data.Entities.User", "User")
                        .WithMany("ActivityLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.AttendanceRecord", b =>
                {
                    b.HasOne("sep.backend.v1.Data.Entities.Bus", "Bus")
                        .WithMany("AttendanceRecords")
                        .HasForeignKey("BusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("sep.backend.v1.Data.Entities.Class", "Class")
                        .WithMany("AttendanceRecords")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("sep.backend.v1.Data.Entities.Club", "Club")
                        .WithMany("AttendanceRecords")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("sep.backend.v1.Data.Entities.Pupil", "Pupil")
                        .WithMany("AttendanceRecords")
                        .HasForeignKey("PupilId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bus");

                    b.Navigation("Class");

                    b.Navigation("Club");

                    b.Navigation("Pupil");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.Bus", b =>
                {
                    b.HasOne("sep.backend.v1.Data.Entities.BusRoute", "BusRoute")
                        .WithMany("Buses")
                        .HasForeignKey("BusRouteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BusRoute");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.BusEnrollment", b =>
                {
                    b.HasOne("sep.backend.v1.Data.Entities.Bus", "Bus")
                        .WithMany("BusEnrollments")
                        .HasForeignKey("BusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("sep.backend.v1.Data.Entities.BusStop", "BusStop")
                        .WithMany("BusEnrollments")
                        .HasForeignKey("BusStopId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("sep.backend.v1.Data.Entities.BusSupervisor", "BusSupervisor")
                        .WithMany("BusEnrollments")
                        .HasForeignKey("BusSupervisorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("sep.backend.v1.Data.Entities.Pupil", "Pupil")
                        .WithMany("BusEnrollments")
                        .HasForeignKey("PupilId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("sep.backend.v1.Data.Entities.Semester", "Semester")
                        .WithMany("BusEnrollments")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bus");

                    b.Navigation("BusStop");

                    b.Navigation("BusSupervisor");

                    b.Navigation("Pupil");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.BusRoute", b =>
                {
                    b.HasOne("sep.backend.v1.Data.Entities.School", "School")
                        .WithMany("BusRoutes")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.BusRouteRegistration", b =>
                {
                    b.HasOne("sep.backend.v1.Data.Entities.BusStop", "BusStop")
                        .WithMany("Registrations")
                        .HasForeignKey("BusStopId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("sep.backend.v1.Data.Entities.Pupil", "Pupil")
                        .WithMany("BusRouteRegistrations")
                        .HasForeignKey("PupilId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("sep.backend.v1.Data.Entities.Semester", "Semester")
                        .WithMany("BusRouteRegistrations")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BusStop");

                    b.Navigation("Pupil");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.BusStop", b =>
                {
                    b.HasOne("sep.backend.v1.Data.Entities.BusRoute", "Route")
                        .WithMany("BusStops")
                        .HasForeignKey("BusRouteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Route");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.BusSupervisor", b =>
                {
                    b.HasOne("sep.backend.v1.Data.Entities.School", "School")
                        .WithMany("BusSupervisors")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.Class", b =>
                {
                    b.HasOne("sep.backend.v1.Data.Entities.School", "School")
                        .WithMany("Classes")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.ClassApplication", b =>
                {
                    b.HasOne("sep.backend.v1.Data.Entities.ClassApplicationCategory", "ClassApplicationCategory")
                        .WithMany("ClassApplications")
                        .HasForeignKey("ApplicationCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("sep.backend.v1.Data.Entities.Pupil", "Pupil")
                        .WithMany("ClassApplications")
                        .HasForeignKey("PupilId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("sep.backend.v1.Data.Entities.Semester", "Semester")
                        .WithMany("ClassApplications")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClassApplicationCategory");

                    b.Navigation("Pupil");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.ClassEnrollment", b =>
                {
                    b.HasOne("sep.backend.v1.Data.Entities.Class", "Class")
                        .WithMany("ClassEnrollments")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("sep.backend.v1.Data.Entities.Pupil", "Pupil")
                        .WithMany("PupilClasses")
                        .HasForeignKey("PupilId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("sep.backend.v1.Data.Entities.Semester", "Semester")
                        .WithMany("ClassEnrollments")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("sep.backend.v1.Data.Entities.Teacher", "Teacher")
                        .WithMany("ClassEnrollments")
                        .HasForeignKey("TeacherId");

                    b.Navigation("Class");

                    b.Navigation("Pupil");

                    b.Navigation("Semester");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.Club", b =>
                {
                    b.HasOne("sep.backend.v1.Data.Entities.School", "School")
                        .WithMany("Clubs")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.ClubEnrollment", b =>
                {
                    b.HasOne("sep.backend.v1.Data.Entities.Club", "Club")
                        .WithMany("ClubEnrollments")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("sep.backend.v1.Data.Entities.Pupil", "Pupil")
                        .WithMany("ClubEnrollments")
                        .HasForeignKey("PupilId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("sep.backend.v1.Data.Entities.Semester", "Semester")
                        .WithMany("ClubEnrollments")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("sep.backend.v1.Data.Entities.Teacher", "Teacher")
                        .WithMany("ClubEnrollments")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Club");

                    b.Navigation("Pupil");

                    b.Navigation("Semester");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.FeatureAccess", b =>
                {
                    b.HasOne("sep.backend.v1.Data.Entities.Feature", "Feature")
                        .WithMany("FeatureAccesses")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("sep.backend.v1.Data.Entities.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany("FeatureAccesses")
                        .HasForeignKey("SubscriptionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("SubscriptionPlan");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.Invoice", b =>
                {
                    b.HasOne("sep.backend.v1.Data.Entities.SchoolSubscriptionPlan", "SchoolSubscriptionPlans")
                        .WithMany("Invoices")
                        .HasForeignKey("SchoolSubscriptionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SchoolSubscriptionPlans");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.NotificationImage", b =>
                {
                    b.HasOne("sep.backend.v1.Data.Entities.Notifications", "Notification")
                        .WithMany("Images")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.Notifications", b =>
                {
                    b.HasOne("sep.backend.v1.Data.Entities.NotificationCategory", "Category")
                        .WithMany("Notifications")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sep.backend.v1.Data.Entities.Class", "Class")
                        .WithMany("Notifications")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sep.backend.v1.Data.Entities.SchoolYear", "SchoolYear")
                        .WithMany("Notifications")
                        .HasForeignKey("SchoolYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Class");

                    b.Navigation("SchoolYear");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.Payment", b =>
                {
                    b.HasOne("sep.backend.v1.Data.Entities.Invoice", "Invoice")
                        .WithMany("Payments")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.Permission", b =>
                {
                    b.HasOne("sep.backend.v1.Data.Entities.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.Pupil", b =>
                {
                    b.HasOne("sep.backend.v1.Data.Entities.School", "School")
                        .WithMany("Pupils")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.PupilFeedback", b =>
                {
                    b.HasOne("sep.backend.v1.Data.Entities.Pupil", "Pupil")
                        .WithMany("PupilFeedbacks")
                        .HasForeignKey("PupilId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("sep.backend.v1.Data.Entities.Semester", "Semester")
                        .WithMany("StudentFeedbacks")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("sep.backend.v1.Data.Entities.Subject", null)
                        .WithMany("PupilFeedbacks")
                        .HasForeignKey("SubjectId");

                    b.Navigation("Pupil");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.PupilScore", b =>
                {
                    b.HasOne("sep.backend.v1.Data.Entities.Pupil", "Pupil")
                        .WithMany("PupilScores")
                        .HasForeignKey("PupilId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("sep.backend.v1.Data.Entities.Semester", "Semester")
                        .WithMany("StudentScores")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("sep.backend.v1.Data.Entities.Subject", "Subject")
                        .WithMany("PupilScores")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pupil");

                    b.Navigation("Semester");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.RolePermission", b =>
                {
                    b.HasOne("sep.backend.v1.Data.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sep.backend.v1.Data.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.SchoolSubscriptionPlan", b =>
                {
                    b.HasOne("sep.backend.v1.Data.Entities.School", "School")
                        .WithMany("SchoolSubscriptionPlans")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("sep.backend.v1.Data.Entities.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany("SchoolSubscriptionPlans")
                        .HasForeignKey("SubscriptionPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");

                    b.Navigation("SubscriptionPlan");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.SchoolYear", b =>
                {
                    b.HasOne("sep.backend.v1.Data.Entities.School", "School")
                        .WithMany("SchoolYears")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.Semester", b =>
                {
                    b.HasOne("sep.backend.v1.Data.Entities.SchoolYear", "SchoolYear")
                        .WithMany("Semesters")
                        .HasForeignKey("SchoolYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SchoolYear");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.Subject", b =>
                {
                    b.HasOne("sep.backend.v1.Data.Entities.School", "School")
                        .WithMany("Subjects")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.Teacher", b =>
                {
                    b.HasOne("sep.backend.v1.Data.Entities.School", "School")
                        .WithMany("Teachers")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.TeacherSubject", b =>
                {
                    b.HasOne("sep.backend.v1.Data.Entities.Subject", "Subject")
                        .WithMany("TeacherSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("sep.backend.v1.Data.Entities.Teacher", "Teacher")
                        .WithMany("TeacherSubjects")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.TimeSlot", b =>
                {
                    b.HasOne("sep.backend.v1.Data.Entities.School", "School")
                        .WithMany("TimeSlots")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("School");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.TimeTable", b =>
                {
                    b.HasOne("sep.backend.v1.Data.Entities.Class", "Class")
                        .WithMany("TimeTables")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("sep.backend.v1.Data.Entities.Semester", "Semester")
                        .WithMany("TimeTables")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("sep.backend.v1.Data.Entities.Subject", "Subject")
                        .WithMany("TimeTables")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("sep.backend.v1.Data.Entities.TimeSlot", "TimeSlot")
                        .WithMany("TimeTables")
                        .HasForeignKey("TimeSlotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Semester");

                    b.Navigation("Subject");

                    b.Navigation("TimeSlot");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.TimeTableSlotSubject", b =>
                {
                    b.HasOne("sep.backend.v1.Data.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sep.backend.v1.Data.Entities.TimeSlot", "TimeSlot")
                        .WithMany()
                        .HasForeignKey("TimeSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sep.backend.v1.Data.Entities.TimeTable", "TimeTable")
                        .WithMany()
                        .HasForeignKey("TimeTableClassId", "TimeTableSubjectId", "TimeTableTimeSlotId", "TimeTableDayOfWeek", "TimeTableSemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("TimeSlot");

                    b.Navigation("TimeTable");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.User", b =>
                {
                    b.HasOne("sep.backend.v1.Data.Entities.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolId");

                    b.Navigation("School");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.UserRole", b =>
                {
                    b.HasOne("sep.backend.v1.Data.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sep.backend.v1.Data.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.Bus", b =>
                {
                    b.Navigation("AttendanceRecords");

                    b.Navigation("BusEnrollments");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.BusRoute", b =>
                {
                    b.Navigation("BusStops");

                    b.Navigation("Buses");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.BusStop", b =>
                {
                    b.Navigation("BusEnrollments");

                    b.Navigation("Registrations");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.BusSupervisor", b =>
                {
                    b.Navigation("BusEnrollments");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.Class", b =>
                {
                    b.Navigation("AttendanceRecords");

                    b.Navigation("ClassEnrollments");

                    b.Navigation("Notifications");

                    b.Navigation("TimeTables");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.ClassApplicationCategory", b =>
                {
                    b.Navigation("ClassApplications");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.Club", b =>
                {
                    b.Navigation("AttendanceRecords");

                    b.Navigation("ClubEnrollments");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.Feature", b =>
                {
                    b.Navigation("FeatureAccesses");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.Invoice", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.NotificationCategory", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.Notifications", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.Pupil", b =>
                {
                    b.Navigation("AttendanceRecords");

                    b.Navigation("BusEnrollments");

                    b.Navigation("BusRouteRegistrations");

                    b.Navigation("ClassApplications");

                    b.Navigation("ClubEnrollments");

                    b.Navigation("PupilClasses");

                    b.Navigation("PupilFeedbacks");

                    b.Navigation("PupilScores");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.Role", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.School", b =>
                {
                    b.Navigation("BusRoutes");

                    b.Navigation("BusSupervisors");

                    b.Navigation("Classes");

                    b.Navigation("Clubs");

                    b.Navigation("Pupils");

                    b.Navigation("SchoolSubscriptionPlans");

                    b.Navigation("SchoolYears");

                    b.Navigation("Subjects");

                    b.Navigation("Teachers");

                    b.Navigation("TimeSlots");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.SchoolSubscriptionPlan", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.SchoolYear", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Semesters");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.Semester", b =>
                {
                    b.Navigation("BusEnrollments");

                    b.Navigation("BusRouteRegistrations");

                    b.Navigation("ClassApplications");

                    b.Navigation("ClassEnrollments");

                    b.Navigation("ClubEnrollments");

                    b.Navigation("StudentFeedbacks");

                    b.Navigation("StudentScores");

                    b.Navigation("TimeTables");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.Subject", b =>
                {
                    b.Navigation("PupilFeedbacks");

                    b.Navigation("PupilScores");

                    b.Navigation("TeacherSubjects");

                    b.Navigation("TimeTables");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.SubscriptionPlan", b =>
                {
                    b.Navigation("FeatureAccesses");

                    b.Navigation("SchoolSubscriptionPlans");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.Teacher", b =>
                {
                    b.Navigation("ClassEnrollments");

                    b.Navigation("ClubEnrollments");

                    b.Navigation("TeacherSubjects");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.TimeSlot", b =>
                {
                    b.Navigation("TimeTables");
                });

            modelBuilder.Entity("sep.backend.v1.Data.Entities.User", b =>
                {
                    b.Navigation("ActivityLogs");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
